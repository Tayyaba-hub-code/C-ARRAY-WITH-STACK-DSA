#include<iostream>
#include<string>
using namespace std;
class stack{
private:
	char*arr;
	int capacity;
	int top;
public:
	stack(int size){
		capacity = size;
		arr = new char[capacity];
		top = -1;

	}
	void push(char ch){
		if (top == capacity - 1){
			cout << "Stack overflow" << endl;
		}
		else{
			arr[++top] = ch;
		}

	}
	char pop(){
		if (top == -1){
			cout << "stack underflow" << endl;
		}
		else{
			return 	arr[top--];
		}
	}
	char peek(){
		if (top != -1){
			return  arr[top];
		}
		else{
			return '\0';
		}
	}
	int size(){
		return top + 1;
	}

	bool matchingBrackets(char opening, char closing){
		return (opening == '('&&closing == ')') ||
			(opening == '['&&closing == ']') ||
			(opening == '{'&&closing == '}');

	}
	bool bracketChecking(string expression){
		for (int i = 0; i<expression.length(); i++){
			char ch = expression[i];
			if (ch == '(' || ch == '{' || ch == '['){
				push(ch);
			}
			else if (ch == ')' || ch == '}' || ch == ']')  {
				if (top == -1 || !matchingBrackets(pop(), ch)){
					return false;
				}

			}
		}
		return top == -1;
	}
};
int main(){
	stack s(50);
	string expression = ("[()]{}{[()()]()}");
	if (s.bracketChecking(expression)){
		cout << "Brackets sequence is followed" << endl;
	}
	else{
		cout << "Brackets are not balanced" << endl;
	}

	system("pause");
	return 0;
}
