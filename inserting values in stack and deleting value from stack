#include <iostream>
using namespace std;

class Stack {
private:
	int* arr;        // Array to store stack elements
	int top;         // Index of the top element
	int capacity;    // Maximum size of the stack

public:
	// Constructor to initialize the stack
	Stack(int size) {
		capacity = size;
		arr = new int[capacity];
		top = -1;  // Stack is initially empty
	}

	// Destructor to free memory
	~Stack() {
		delete[] arr;
	}

	// Push operation
	void push(int value) {
		if (top == capacity - 1) {
			cout << "Stack overflow. Cannot push " << value << endl;
		}
		else {
			arr[++top] = value;  // Increment top and insert value
			cout << value << " pushed to stack." << endl;
		}
	}

	// Pop operation
	int pop() {
		if (top == -1) {
			cout << "Stack underflow. Cannot pop." << endl;
			return -1;
		}
		else {
			int poppedValue = arr[top--];  // Return top value and decrement top
			return poppedValue;
		}
	}

	// Top operation (peek)
	int peek() {
		if (top != -1) {
			return arr[top];
		}
		else {
			cout << "Stack is empty." << endl;
			return -1;
		}
	}

	// Empty check
	bool isEmpty() {
		return top == -1;
	}

	// Size of the stack
	int size() {
		return top + 1;
	}
	void deleteValue(int value){
		int *temp = new int[capacity];
		int newtop = -1;
		for (int i = 0; i <=top; i++){


			if (arr[i] != value){
				temp[++newtop] = arr[i];

			}
		}
		delete[]arr;
		arr = temp;
		top = newtop;
		cout<<"array after deleting value:" << endl;
		for (int i = 0; i <= top; i++){
			cout  <<arr[i]<< " ";
		}
	}
};

int main() {
	Stack s(5);  // Create a stack of capacity 5

	s.push(10);
	s.push(20);
	s.push(30);
	s.deleteValue(20);
	cout << "Top element: " << s.peek() << endl;  // Output: 30

	cout << "Popped element: " << s.pop() << endl;  // Output: 30
	cout << "Popped element: " << s.pop() << endl;  // Output: 20

	cout << "Size of the stack: " << s.size() << endl;  // Output: 1

	if (s.isEmpty()) {
		cout << "Stack is empty!" << endl;
	}
	else {
		cout << "Stack is not empty." << endl;  // Output: Stack is not empty.
	}
	
	system("pause");
	return 0;
}
